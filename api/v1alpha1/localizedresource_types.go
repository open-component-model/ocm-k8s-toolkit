package v1alpha1

import (
	"fmt"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const KindLocalizedResource = "LocalizedResource"

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// LocalizedResource is the Schema for the localizations API.
type LocalizedResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   LocalizedResourceSpec   `json:"spec,omitempty"`
	Status LocalizedResourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LocalizedResourceList contains a list of LocalizedResource.
type LocalizedResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LocalizedResource `json:"items"`
}

func (in *LocalizedResource) GetObjectMeta() *metav1.ObjectMeta {
	return &in.ObjectMeta
}

func (in *LocalizedResource) GetKind() string {
	return "LocalizedResource"
}

func (in *LocalizedResource) SetObservedGeneration(v int64) {
	in.Status.ObservedGeneration = v
}

func (in *LocalizedResource) GetConditions() []metav1.Condition {
	return in.Status.Conditions
}

func (in *LocalizedResource) SetConditions(conditions []metav1.Condition) {
	in.Status.Conditions = conditions
}

func (in *LocalizedResource) GetVID() map[string]string {
	vid := fmt.Sprintf("%s:%s", in.Namespace, in.Name)
	metadata := make(map[string]string)
	metadata[GroupVersion.Group+"/localization"] = vid

	return metadata
}

func (in *LocalizedResource) GetConfig() *ConfigurationReference {
	return &in.Spec.Config
}

func (in *LocalizedResource) GetTarget() *ConfigurationReference {
	return &in.Spec.Target
}

func (in *LocalizedResource) SetConfig(v *ConfigurationReference) {
	v.DeepCopyInto(&in.Spec.Config)
}

func (in *LocalizedResource) SetTarget(v *ConfigurationReference) {
	v.DeepCopyInto(&in.Spec.Target)
}

func (in *LocalizedResource) GetOCIArtifact() *OCIArtifactInfo {
	return in.Status.OCIArtifact
}

// GetOCIRepository returns the name of the OCI repository of the OCI artifact, in which the localized resource is
// stored.
func (in *LocalizedResource) GetOCIRepository() string {
	return in.Status.OCIArtifact.Repository
}

// GetManifestDigest returns the manifest digest of the OCI artifact, in which the localized resource is stored.
func (in *LocalizedResource) GetManifestDigest() string {
	return in.Status.OCIArtifact.Digest
}

// GetBlobDigest returns the blob digest of the OCI artifact, in which the localized resource is stored.
func (in *LocalizedResource) GetBlobDigest() string {
	return in.Status.OCIArtifact.Blob.Digest
}

type LocalizedResourceSpec struct {
	// Target that is to be localized
	Target ConfigurationReference `json:"target"`

	// Config of the localization data to be applied to Target (applied in order of appearance)
	Config ConfigurationReference `json:"config"`

	// Interval at which to refresh the localization in case the Component Version is not yet ready
	Interval metav1.Duration `json:"interval"`

	// Suspend all localization behaviors, but keep existing localizations in place
	Suspend bool `json:"suspend,omitempty"`
}

type LocalizedResourceStatus struct {
	ObservedGeneration int64              `json:"observedGeneration,omitempty"`
	Conditions         []metav1.Condition `json:"conditions,omitempty"`

	// The OCIArtifact contains the information where to find the OCI artifact which contains
	// the content of the Resource after Localization
	OCIArtifact *OCIArtifactInfo `json:"ociArtifact,omitempty"`

	// The LocalizedResource reports a ConfiguredResourceRef which contains a reference to the ConfiguredResource
	// that is responsible for generating the OCI artifact.
	ConfiguredResourceRef *ObjectKey `json:"configuredResourceRef,omitempty"`

	// ConfigRef is a reference to the Configuration that was generated by the Localization process
	// and is used to setup the ConfiguredResource responsible for generating the OCI artifact.
	ConfigRef *ObjectKey `json:"configRef,omitempty"`

	// A unique digest of the combination of the config and target resources applied through a LocalizationStrategy
	Digest string `json:"digest,omitempty"`
}

func init() {
	SchemeBuilder.Register(&LocalizedResource{}, &LocalizedResourceList{})
}
